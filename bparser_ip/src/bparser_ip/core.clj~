;; original (ns bparser-ip.core (:gen-class))
(ns bparser-ip.core
  (:require [instaparse.core :as insta] :require [clojure.string :as str]
  		))

;; ### Comments , Whitespace and Pragmas ###

(def preparse				;; Remove Comments and whitespaces , comment = !('/*@') '/*' B
  (insta/parser
    "S_pre = #'\\s+' | comments
     comments = comment | S_pre
	comment = ('/*'| '/*@') B
	B = '*/' | !( '*/' ) #'.' B"

    :auto-whitespace :standard))

;; ## PRAGMA ##

(def parse_pragma
  (insta/parser
	"
	S_pra	= !('/*@')Any | Pragma | <''>
	<Any>	= #'.' S_pra
	Pragma	= <'/*@'> P_end
	P_end	= <<'*/'> S_pra> | !('*/')#'[^\\s]*' P_end

	"

    :auto-whitespace :standard))

(def parse_pragma_withmeta
	(insta/parser
	"S_pra = (!(whitespace? '/*@') Any | Pragma | <''>) whitespace?
	whitespace = #'\\s+'
	Any = whitespace? #'.' S_pra
	Pragma = whitespace? <'/*@'> P_end
	P_end = <whitespace? <'*/'> S_pra> | !(whitespace? '*/') whitespace? #'[^\\s]*' P_end"
))

(use 'clojure.java.io)			;; check if file exists
(def counta (atom -1))			;; Counter
(defn addc [x] (swap! counta + x))	;; Counter Add Function

(def want_to_parse (atom []))		;; Vector, what is the next file to parse
(def want_to_print_name (atom []))	;; Vector, the name of the Implementation, Refinement or Machine
(def want_to_print (atom []))		;; Vector, the output
(def past_parse (atom []))		;; Vector, contains the parsed files

(def get_tree
  (insta/parser (clojure.java.io/resource "bparser_ip/grammar.bnf")
  						:auto-whitespace preparse)
)


(defmulti to-prolog first)	;; the prototypes must know to-prolog

;; prototypes

(defn list0 [node]
   (let [children (rest node)
         children-str (map to-prolog children)
         inner-str (clojure.string/join "," children-str)]
      (format "[%s]" inner-str))

)
(defn simple0 [node]
	(addc 1)
	(let [countaa @counta
	name (get (str/split (str (first node)) #"-") 1)
	children (rest node)
	children-str (map to-prolog children)
	inner-str (clojure.string/join "," children-str)]
	(format "%s(%s)" name (str countaa)))
)

(defn simple1 [node]
	(addc 1)
	(let [countaa @counta
	name (get (str/split (str (first node)) #"-") 1)
	children (rest node)
	children-str (map to-prolog children)
	inner-str (clojure.string/join "," children-str)]
	(format "%s(%s)" name (str countaa "," inner-str)))
)

(defn simple1_snocount [node]	;; see no count
	(addc 1)
	(let [
	name (get (str/split (str (first node)) #"-") 1)
	children (rest node)
	children-str (map to-prolog children)
	inner-str (clojure.string/join "," children-str)]
	(format "%s(%s)" name inner-str))
)

(defn simple2 [node]
	(addc 1)   
	(let [countaa @counta
	name (get (str/split (str (first node)) #"-") 1)
	children (rest node)
        children-str (map to-prolog children)
        inner-str (clojure.string/join "," children-str)]
	(format "%s(%s)" name (str countaa ",[" inner-str "]")))
	
)

(defn simple3 [node]
	(addc 1)
	(let [countaa @counta
	name (get (str/split (str (first node)) #"-") 1)
	children (rest node)
	children-str (map to-prolog children)
	inner-str (clojure.string/join "," children-str)]
	(format "[%s(%s)]" name (str countaa "," inner-str)))
)

(defn simple4 [node]
	(addc 2)
	(let [countaa @counta
	name0 (get (str/split (str (first node)) #"-") 1)
	name1 (get (str/split (str (first node)) #"-") 2)
	children (rest node)
       	children-str (map to-prolog children)
       	inner-str (clojure.string/join "," children-str)
	inner-str2(str countaa ")," inner-str)
	inner-str3(str (- countaa 1) "," name1 "(" inner-str2)
	]
		(format "%s(%s)" name0 inner-str3)
	)
)

;; hashmap 4 prototypes
(def myfunc {
;; ### Machine* ###

:S_definition_file-machine simple1_snocount,
:S_predicate-machine simple1_snocount,
:S_expression-machine simple1_snocount,
:S_predformula-machine simple1_snocount,
:S_exprformula-machine simple1_snocount,
:S_substitution-machine simple1_snocount,
:S_abstract_constants-machine simple1_snocount,
:S_abstract_variables-machine simple1_snocount,
:S_assertions-machine simple1_snocount,
:S_concrete_constants-machine simple1_snocount,
:S_concrete_variables-machine simple1_snocount,
:S_constants-machine simple1_snocount,
:S_constraints-machine simple1_snocount,
:S_definitions-machine simple1_snocount,
:S_extends-machine simple1_snocount,
:S_imports-machine simple1_snocount,
:S_includes-machine simple1_snocount,
:S_initialisation-machine simple1_snocount,
:S_invariant-machine simple1_snocount,
:S_local_operations-machine simple1_snocount,
:S_operations-machine simple1_snocount,
:S_promotes-machine simple1_snocount,
:S_properties-machine simple1_snocount,
:S_sees-machine simple1_snocount,
:S_sets-machine simple1_snocount,
:S_uses-machine simple1_snocount,
:S_values-machine simple1_snocount,
:S_variables-machine simple1_snocount,
:S_oppattern-machine simple1_snocount,
:S_definition-machine simple1_snocount,

:Machine_a-abstract_machine-machine simple4,
:Machine_a-abstract_machine-model simple4,
:Machine_a-abstract_machine-system simple4,

:Machine-refinement_machine simple1,
:Machine-implementation_machine simple1,



;; ## Machine_clause-* ##
;;:Machine_clause-definitions simple1,
:Machine_clause-constraints simple1,
:Machine_clause-sees simple1,
:Machine_clause-promotes simple1,
:Machine_clause-uses simple1,
:Machine_clause-includes simple1,
:Machine_clause-extends simple1,
:Machine_clause-imports simple1,
:Machine_clause-sets simple2,
:Machine_clause-constants simple1,
:Machine_clause-abstract_constants simple1,
:Machine_clause-properties simple1,
:Machine_clause-concrete_variables simple1,
:Machine_clause-variables simple1,
;;:Machine_clause-assertions simple2,
:Machine_clause-initialisation simple1,
:Machine_clause-local_operations simple2,
:Machine_clause-operations simple2,
:Machine_clause-values simple2,
:Machine_clause-invariant simple1,
:Machine_clause-freetypes simple2,

:Values-values_entry simple1,
:Machine_ref_list list0,
:Machine_ref-machine_reference simple1,
:Machine_ref_op list0,
:Set-deferred_set simple1,
:Set-enumerated_set simple1,
:Freetype-freetype simple1,
:Freetypecons_list list0,
:Freetypecons-element simple1,
:Freetypecons-constructor simple1,



;; ### Predicate* ###
:Predicate_p30-implication simple1,
:Predicate_p40-disjunct simple1,
:Predicate_p40-conjunct simple1,
:Predicate_p60-equivalence simple1,

;; ## Predicate_atomic-* ##
:Predicate_atomic-substitution simple1,
:Predicate_atomic-assign simple1,

:Predicate_atomic-equal simple1,
:Predicate_atomic-member simple1,
:Predicate_atomic-subset simple1,
:Predicate_atomic-subset_strict simple1,
:Predicate_atomic-not_subset simple1,
:Predicate_atomic-not_subset_strict simple1,
:Predicate_atomic-not_equal simple1,
:Predicate_atomic-not_member simple1,
:Predicate_atomic-less_equal simple1,
:Predicate_atomic-less simple1,
:Predicate_atomic-greater_equal simple1,
:Predicate_atomic-greater simple1,
:Predicate_atomic-bfalse simple1,
:Predicate_atomic-negation simple1,
:Predicate_atomic-forall simple1,
:Predicate_atomic-exists simple1,
:Predicate_atomic-definition simple1,
:Predicate_atomic-identifier simple1,
:Predicate_atomic-function simple1,
:Predicate_atomic-truth simple0,

;; ### Expression* ###

;; ## Expression_in_par-* ##
:Expression_in_par-composition simple1,
:Expression_in_par-parallel_product simple1,

;; ## Expression_p125-* ##
:Expression_p125-relations simple1,
:Expression_p125-partial_function simple1,
:Expression_p125-total_function simple1,
:Expression_p125-partial_injection simple1,
:Expression_p125-total_injection simple1,
:Expression_p125-partial_surjection simple1,
:Expression_p125-total_surjection simple1,
:Expression_p125-partial_bijection simple1,
:Expression_p125-total_bijection simple1,
:Expression_p125-total_relation simple1,
:Expression_p125-surjection_relation simple1,
:Expression_p125-total_surjection_relation simple1,

;; ## Expression_p160-* ##
:Expression_p160-overwrite simple1,
:Expression_p160-direct_product simple1,
:Expression_p160-concat simple1,
:Expression_p160-domain_restriction simple1,
:Expression_p160-domain_subtraction simple1,
:Expression_p160-range_restriction simple1,
:Expression_p160-range_subtraction simple1,
:Expression_p160-insert_front simple1,
:Expression_p160-insert_tail simple1,
:Expression_p160-union simple1,
:Expression_p160-intersection simple1,
:Expression_p160-restrict_front simple1,
:Expression_p160-restrict_tail simple1,
:Expression_p160-couple simple2,

;; ## Expression_p170-interval ##
:Expression_p170-interval simple1,

;; ## Expression_p180-* ##
:Expression_p180-add simple1,
:Expression_p180-set_subtraction simple1,
:Expression_p180-minus_or_set_subtract simple1,

;; ## Expression_p190-* ##
:Expression_p190-mult_or_cart simple1,
:Expression_p190-div simple1,
:Expression_p190-modulo simple1,

;; ## Expression_p200_power_of ##
:Expression_p200-power_of simple1,

;; ## Expression_p210-unary_minus ##
:Expression_p210-unary_minus simple1,

;; ## Expression_p230-reverse ##
:Expression_p230-reverse simple1,

;; ## Expression_p231-image ##
:Expression_p231-image simple1

;; ## Expression_k- ##
:Expression_k-convert_bool simple1,
:Expression_k-max simple1,
:Expression_k-min simple1,
:Expression_k-card simple1,
:Expression_k-general_sum simple1,
:Expression_k-general_product simple1,
:Expression_k-pow_subset simple1,
:Expression_k-pow1_subset simple1,
:Expression_k-fin_subset simple1,
:Expression_k-fin1_subset simple1,
:Expression_k-general_union simple1,
:Expression_k-general_intersection simple1,
:Expression_k-identity simple1,
:Expression_k-reflexive_closure simple1,
:Expression_k-closure simple1,
:Expression_k-domain simple1,
:Expression_k-range simple1,
:Expression_k-lambda simple1,
:Expression_k-trans_function simple1,
:Expression_k-trans_relation simple1,
:Expression_k-seq simple1,
:Expression_k-seq1 simple1,
:Expression_k-iseq simple1,
:Expression_k-iseq1 simple1,
:Expression_k-perm simple1,
:Expression_k-empty_sequence simple0,
:Expression_k-size simple1,
:Expression_k-first simple1,
:Expression_k-last simple1,
:Expression_k-front simple1,
:Expression_k-tail simple1,
:Expression_k-rev simple1,
:Expression_k-first_projection simple1,
:Expression_k-second_projection simple1,
:Expression_k-iteration simple1,
:Expression_k-comprehension_set simple1,
:Expression_k-quantified_union simple1,
:Expression_k-quantified_intersection simple1,
:Expression_k-quantified_set simple1,
:Expression_k-set_extension simple1,
:Expression_k-sequence_extension simple1,
:Expression_k-couple2 simple1,
:Expression_k-general_concat simple1,
:Expression_k-tree simple1,
:Expression_k-btree simple1,
:Expression_k-const simple1,
:Expression_k-top simple1,
:Expression_k-sons simple1,
:Expression_k-prefix simple1,
:Expression_k-postfix simple1,
:Expression_k-sizet simple1,
:Expression_k-mirror simple1,
:Expression_k-rank simple1,
:Expression_k-father simple1,
:Expression_k-son simple1,
:Expression_k-subtree simple1,
:Expression_k-arity simple1,
:Expression_k-bin1 simple1,
:Expression_k-bin2 simple1,
:Expression_k-left simple1,
:Expression_k-right simple1,
:Expression_k-infix simple1,
:Expression_k-struct simple1,
:Expression_k-rec simple1,
:Expression_k-record_field simple1,
:Expression_func-function simple1,

:Rec_entry_list list0,
:Rec_entry-rec_entry simple1,

;; ## Expression_atomic-* ##
;;:Expression_atomic-primed_identifier	= Composed_identifier <"$"> Integer_literal
:Expression_atomic-boolean_true simple0,
:Expression_atomic-boolean_false simple0,
:Expression_atomic-successor simple0,
:Expression_atomic-predecessor simple0,
:Expression_atomic-max_int simple0,
:Expression_atomic-min_int simple0,
:Expression_atomic-empty_set simple0,
:Expression_atomic-integer_set simple0,
:Expression_atomic-natural_set simple0,
:Expression_atomic-natural1_set simple0,
:Expression_atomic-nat_set simple0,
:Expression_atomic-nat1_set simple0,
:Expression_atomic-int_set simple0,
:Expression_atomic-bool_set simple0,
:Expression_atomic-string_set simple0,

;; ### Substitution* ###

;; ## Substitution_l1-sequence ##
:Substitution_l1-sequence simple2,

;; ## :Substitution_l2-parallel ##
:Substitution_l2-parallel simple2,

;; ## Substitution_l3-* ##
:Substitution_l3-block simple1,
:Substitution_l3-skip simple0,
:Substitution_l3-assign simple1,
:Substitution_l3-precondition simple1,
:Substitution_l3-assertion simple1,
:Substitution_l3-choice simple2,
:Substitution_l3-if simple1,
:Substitution_l3-select simple1,
:Substitution_l3-case simple1,
:Substitution_l3-any simple1,
:Substitution_l3-becomes_element_of simple1,
:Substitution_l3-becomes_such simple1,
:Substitution_l3-var simple1,
:Substitution_l3-func_op simple1,
:Substitution_l3-while simple1,
:Substitution_l3-let simple1,
;;:Substitution_l3-definition simple3,

;; ## Sub-* ##
:Sub-choice_or simple1,

:If_elsif_list list0,
:If_elsif-if_elsif simple1,

:Select_when_list list0,
:Select_when-select_when simple1,

:Case_or_list list0,
:Case_or-case_or simple1,




;; ### Other ###
:Machine_clause_list list0,
:Expsc list0,
:Identifierload_list list0,
:Identifierload_clause_list list0,
:Identifier_list list0
}
)

(defmethod to-prolog :S [node]
	(let [
		children (rest node)
		children-str (map to-prolog children)
		inner-str (clojure.string/join "," children-str)
	]
		(format "%s" inner-str)
	)
)

(defmethod to-prolog :Machine [node]
	(let [
		children (rest node)
		children-str (map to-prolog children)
		inner-str (clojure.string/join "," children-str)
	]
		(format "machine(%s)" inner-str)
	)
)



(defmethod to-prolog :Header [node]
	(addc 1)
   (let [countaa @counta
	children (rest node)
        children-str (map to-prolog children)
        inner-str (clojure.string/join "," children-str)
	inner-str2 (str/split inner-str #",")
	inner-first (get inner-str2 0)
	inner-rest (subvec inner-str2 1)
	inner-rest2 (clojure.string/join "," inner-rest)
	inner-str3(str countaa "," inner-first ",[" inner-rest2 "]")
	]
      (format "machine_header(%s)" inner-str3))
)


(defmethod to-prolog :Operation [node]
	(let [countaa (+ @counta 1)
	children (rest node)
	children-mod (replace (vec children) [1 0 2 3])	;; permutation
	children-str (map to-prolog children-mod)
	inner-str (clojure.string/join "," children-str)]
	(format "%s(%s)" "operation" (str countaa "," inner-str)))

)


(defmethod to-prolog :Operation_noentry [node]
	(format "[]")
)





;; Substitution

(defmethod to-prolog :Substitution_l3-operation_call [node]
	(let [countaa (+ @counta 1)
	children (rest node)
	children-mod (replace (vec children) [1 0 2])	;; permutation
	children-str (map to-prolog (vec children-mod))
	inner-str (clojure.string/join "," children-str)]
	(format "operation_call(%s)" (str countaa "," inner-str)))
)

(defmethod to-prolog :Empty [node]
      (format "[]")
)

(defmethod to-prolog :Empty_else [node]
      (format "skip(none)")
)




(defmethod to-prolog :identifier [[_ ident]]
	(addc 1)

	(if (some #(Character/isUpperCase %) (str (get ident 0)))
	(format "identifier(%s,'%s')" (str @counta) ident)
	(format "identifier(%s)" (str @counta "," ident)))
)
(defmethod to-prolog :identifierload [[_ ident]]
	(if (.exists (as-file (str ident ".ref")))
		(swap! want_to_parse conj (str ident ".ref"))

		(if (.exists (as-file (str ident ".mch")))
			(swap! want_to_parse conj (str ident ".mch"))

			(swap! want_to_parse conj "error")
		)
	)
	(if (some #(Character/isUpperCase %) (str (get ident 0)))
	(format "'%s'" ident)
	(format "%s" ident))
	
)
(defmethod to-prolog :identifierload_clause [[_ ident]]
	(addc 1)
	(if (.exists (as-file (str ident ".ref")))
		(swap! want_to_parse conj (str ident ".ref"))

		(if (.exists (as-file (str ident ".mch")))
			(swap! want_to_parse conj (str ident ".mch"))

			(swap! want_to_parse conj "error")
		)
	)
	(if (some #(Character/isUpperCase %) (str (get ident 0)))
	(format "identifier(%s,'%s')" (str @counta) ident)
	(format "identifier(%s)" (str @counta "," ident)))
)

(defmethod to-prolog :identifier_header [[_ ident]]
	(swap! want_to_print_name conj ident)
	(if (some #(Character/isUpperCase %) (str (get ident 0)))
	(format "'%s'" ident)
	(format "%s" ident))
)

(defmethod to-prolog :identifier_ [[_ ident]]
	(if (some #(Character/isUpperCase %) (str (get ident 0)))
	(format "'%s'" ident)
	(format "%s" ident))
)

(defmethod to-prolog :identifier__ [[_ ident]]
	(if (some #(Character/isUpperCase %) (str (get ident 0)))
	(format "'%s'" ident)
	(format "%s" ident))
)

(defmethod to-prolog :Integer_literal
	[[_ ident]]
	(addc 1)
	(format "integer(%s)" (str @counta "," ident))
)

(defmethod to-prolog :String_literal
	[[_ ident]]
	(addc 1)
	(format "string(%s,'%s')" (str @counta) (subs ident 1 (- (count ident) 1)))
)

(defmethod to-prolog :default [node]
	(println "H")
	(println (first node))
	((get myfunc (keyword (first node))) node)
)

(defn real_parse [wtp]	;; want_to_parse
	(if (not(.contains @past_parse wtp))
	(do
		(swap! past_parse conj wtp)
		(addc 1)
		(println (get_tree (slurp wtp)))
		;;(println (parse_pragma (slurp wtp)))
		(swap! want_to_print conj (str (to-prolog (get_tree (slurp wtp)))"."))
	
		(let [wtp_vec @want_to_parse
		]
		(def want_to_parse (atom []))
		(doseq [i (sort wtp_vec)] (real_parse i))

		)
	)
	
	)
)
(defn parse [args]
	(def counta (atom -1))
	(def want_to_print (atom []))
	(def want_to_parse (atom []))
	(def want_to_print_name (atom []))
	(def past_parse (atom []))

	(def print_me {})
	(defn vec2_2_mf [a b] {:name a :printt b} )	;; two vector 2 multifield, need 4 sort

	(real_parse args)	;; action
	
	(doseq [i (sort-by :name (map vec2_2_mf @want_to_print_name @want_to_print))] (println (get i :printt)))

)

(defn -main
  "I don't do a whole lot ... yet."
  [& args]
  (println "Hello, World!")
	(parse "input.mch") )
